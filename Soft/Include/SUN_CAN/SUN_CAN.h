/****************************************************************************** 
  Определение констант протокола SUN_CAN модуля VacuumSystem
  Версия файла 1.2
  *****************************************************************************/
#ifndef __SUNCANH
#define __SUNCANH

/********************************* Реализация протокола SUN-CAN *******************************************/
#define MASK_MST_TM             0xF0
#define MASK_LST_TM             0x0F

#define PRIORITY_HIGH           (uint32_t)0x04000000
#define PRIORITY_HIGH_LOW       (uint32_t)0x08000000
#define PRIORITY_NORMAL_HIGH	(uint32_t)0x0C000000
#define PRIORITY_NORMAL         (uint32_t)0x10000000
#define PRIORITY_NORMAL_LOW     (uint32_t)0x14000000
#define PRIORITY_LOW            (uint32_t)0x18000000

#define SOURCE_ID(a)            ((a<<13))
#define TARGET_ID(a)            ((a<<0))

// Идентификациооные номера модулей(ID).
#define ID_BROADCAST            0x00

#define ID_PCI                  0x01

#define ID_SUNPRINT             0x02

#define ID_LINUX                0x11

#define ID_PULT                 0x21

#define ID_CARRIAGE             0x40

#define ID_SERVO                0x51
#define ID_INKSYSTEM            0x52
#define ID_RELAYSYSTEM          0x55
#define ID_CLEARNINGSYSTEM      0x56
#define ID_VACUUMSYSTEM         0x57
#define ID_SENSORLEVEL_5A       0x5A
#define ID_SENSORLEVEL_5B       0x5B

#define ID_DRIVERX              0x61
#define ID_DRIVERY              0x62
#define ID_DRIVERZ              0x65
#define ID_DRIVER_66            0x66
#define ID_DRIVER_67            0x67
#define ID_DRIVER_68            0x68
#define ID_DRIVER_6A            0x6A
#define ID_DRIVER_6B            0x6B
#define ID_DRIVER_6C            0x6C
#define ID_DRIVER_6E            0x6E

#define ID_DRIVER_ZLR           0x71
#define ID_DRIVER_M             0x72

#define ID_UV_E1                0xE1
#define ID_UV_E2                0xE2
#define ID_UV_E3                0xE3
#define ID_UV_E4                0xE4

/******************************************************************************
 TM - Type Message. Первый байт в поле <данные> - тип сообщения							*/
// Запись параметорв 
// Format: [TM_WRITE_x] [KK] [NNMM] [XXYYZZWW]. KK - номер канала, MMNN - номер параметра, WWZZYYXX - значение параметра, от 1 до 4 байт.
#define TM_WRITE                0x12
#define	TM_WRITE_2		0x14
#define	TM_WRITE_4		0x16
// Запись параметра с подтверждением записи.
#define TM_WRITE_ACK		0x13
#define	TM_WRITE_ACK_2          0x15
#define	TM_WRITE_ACK_4          0x17
// Чтение параметров.
// Format: [TM_READ_x] [KK] [NNMM]. KK - номер канала, MMNN - номер параметра.
#define TM_READ                 0x22
#define TM_READ_2               0x24
#define TM_READ_4               0x26
// Команды на исполнение
#define TM_CMD                  0x30
#define TM_CMD_ACK              0x31
#define TM_CMD_1                0x32
#define TM_CMD_ACK_1		0x33		
#define TM_CMD_2                0x34
#define TM_CMD_ACK_2		0x35		
#define TM_CMD_4                0x36
#define TM_CMD_ACK_4		0x37		
#define TM_CMD_6                0x38
#define TM_CMD_ACK_6		0x39
// Подвтерждения приема комнад.
#define TM_ACK_CMD_1		0x42
#define TM_ACK_CMD_2		0x44
#define TM_ACK_CMD_4		0x46
#define TM_ACK_CMD_6		0x48
// Подтверждения исполнения команд.
#define TM_EXECUTE_CMD	        0x4A
#define TM_EXECUTE_CMD_1	0x4B
#define TM_EXECUTE_CMD_2	0x4C
#define TM_EXECUTE_CMD_4	0x4D
#define TM_EXECUTE_CMD_6	0x4E

#define TM_ERROR_CMD		0x53
#define TM_ERROR_EXECUTE_CMD	0x54
// Сообщения о событии/состоянии.
// Формат [TM_STATE] [KK] [YYXX]. Длина сообщения 4 байта.
// [KK] - номер канала, 
// [XXYY] - код события. 
#define TM_STATE                0x74
/* Формат [TM_STATE] [KK] [YYXX][ZZWW]. Длина сообщения 6 байта.
  [KK]    - номер канала; 
  [XXYY]  - код события; 
  [WWZZ]  - значение 2 байта. */
#define TM_STATE_2		0x76
/* Формат [TM_STATE] [KK] [YYXX][ZZWWUUQQ]. Длина сообщения 8 байта.
  [KK]    - номер канала;
  [XXYY]  - код события;
  [QQUUWWZZ] - значение 4 байта. */
#define TM_STATE_4		0x78
/******************************************************************************/

/******************************************************************************/
#define TM_BOOT_WR_BYTE   0x81
// Format: [TM][XXYYZZ][MMNN]
// TM - Type Message; ZZYYXX - 24bit adress; NNMM - data word.
#define TM_BOOT_WR_WORD         0x82
#define TM_BOOT_WR_DWORD        0x83

#define TM_BOOT_RD_BYTE         0x85
#define TM_BOOT_RD_WORD         0x86
#define TM_BOOT_RD_DWORD        0x87

#define TM_BOOT_ANSWER_BYTE     0x89
#define TM_BOOT_ANSWER_WORD     0x8A
#define TM_BOOT_ANSWER_DWORD    0x8B
/******************************************************************************/

/******************************************************************************/
// Ответ на запрос/подтверждение записи.
// Format: [TM_ANSWER] [KK] [NNMM] [XXYYZZWW]. [KK] номер канала, [NNMM] - адрес данных, [XXYYZZWW] - данные, 1, 2 или 4 байта.
#define TM_ANSWER               0x62
#define TM_ANSWER_2		0x64
#define TM_ANSWER_4		0x66
// Ошибки выполнения операций
// Format: [TM_ERROR_WRITE] [KK] [NNMM] [ERR]. KK - номер канала, NNMM - адрес параметра, ERR - код ошибки.
#define TM_ERROR_WRITE	        0x51	
#define TM_ERROR_READ		0x52
/******************************************************************************/

/******************************************************************************/
// Значение поля <FLAG> команды TC_INFO
// Ответ на общую команду "идентификация"
#define INFO_COMMON   0x01

// Ответ на адресную команду "идентификация"
#define INFO_PRIVATE  0x02

// Сброс по питанию
#define INFO_POWER    0x03

// Нажата клавиша "Reset"
#define INFO_RESET    0x04

// brown-out
#define INFO_BROWNOUT 0x05

// Сработал watchdog
#define INFO_WDOG     0x06

// Восстановление после потери связи
#define INFO_RECOVERY 0x07

// Наличие устройства на шине CAN.
// Событие с данным флагом генериться каждым устройством с интервалом времени 3 секунды по
// широковещательному адресу.
#define INFO_CAN_BUS  0x08
/******************************************************************************/

/******************************************************************************/
#define ERR_FAIL                0x00
#define ERR_READONLY            0x01
#define ERR_VALUE               0x02
#define ERR_WRITEONLY           0x04
#define ERR_FORMAT		0x05
#define ERR_NOTACCESS           0x06
#define ERR_BOARD               0x07	// Достигнута граница. Сработал левый или правый концевик, достигнуто макс. значение.
#define ERR_NOTON               0x08
#define ERR_FLASHWRITE          0x08
/******************************************************************************/

/******************************************************************************/
/* Идентификационный 96-и битный номер платы (микроконтроллера): ID2:ID1:ID0 

Формат запроса чтения: 26 FF F3 FF
Ответ:66 FF F3 FF NN HH FL FH

NN – Device_ID платы;
HH - аппаратная версия в формате BCD;
FL - версия загрузчика, минорная часть;
FH - версия загрузчика, мажорная часть;

Принцип формирования версии загрузчика.
Версия загрузчика поддерживает совместимость для минорной части. 
Минорная часть изменяется при исправлении ошибок в коде программы загрузчика, 
изменения алгоритма работы, аппаратные изменения, добавление новых параметров.

Мажорная часть служит для идентификации совместимости версии программы-
загрузчика и программы-приложения. Мажорная часть изменяется, если в программу-
приложение или в программу-загрузчик вносятся изменения, которые не обеспечивают
100% работоспособность программы изделия в целом. 

К описанию версии программы-приложения ОБЯЗАТЕЛЬНО необходимо указывать 
совместимую МАЖОРНУЮ ЧАСТЬ версии программы-загрузчика. 

Например, можно в отдельном *.h файле указать 
#define BOOT_FW_COMPATIBILITY 0x0201

Запись 0x0201 означает версию загрузчика 2.1, при этом для идентификации
минорная часть отбрасывается, а используется только мажорная.*/

#define AD_BOOTINFO                                                       0xFFF3
/******************************************************************************/
/* Идентификационный 96-и битный номер платы (микроконтроллера): ID2:ID1:ID0 

Type: LONG 
Read:   26 FE F4 FF
Answer: 66 FE F4 FF XX YY WW ZZ */

#define AD_BOARD_ID0                                                      0xFFF4
/******************************************************************************/
/* Идентификационный 96-и битный номер платы (микроконтроллера): ID2:ID1:ID0 

Type: LONG 
Read:   26 FE F5 FF
Answer: 66 FE F5 FF XX YY WW ZZ */

#define AD_BOARD_ID1                                                      0xFFF5
/******************************************************************************/
/* Идентификационный 96-и битный номер платы (микроконтроллера): ID2:ID1:ID0 

Type: LONG 
Read:   26 FE F6 FF
Answer: 66 FE F6 FF XX YY WW ZZ */

#define AD_BOARD_ID2                                                      0xFFF6
/******************************************************************************/
/* Уникальный номер программной конфигурации платы

0xFE 0xFFF7. UINT32  RWA
 
Например, кол-во используемых каналов, функции каналов, функциональное назначение платы и т.п.

Type: LONG 
Read:   26 FE F7 FF
Answer: 66 FE F7 FF XX YY WW ZZ

XX – уникальный номер, предлагается использовать значение Device ID;
YY – порядковый номер (возрастающий);
WW, ZZ - зарезервировано. */

#define AD_CONFIG                                                         0xFFF7
/******************************************************************************/
/* Версия Hardware

Type: WORD 
Read:   26 FE F8 FF
Answer: 66 FE F8 FF XX YY WW ZZ

XXYY – минорная;
WWZZ – мажорная часть.

Например, версия Hardware 2.15: XXYY = 0x000F, WWZZ = 0x0002. */

#define AD_HARDWARE                                                         0xFFF8
/******************************************************************************/
/* Дополнительная информация о версии Firmware

UINT16_UINT16   R   
Значащее поле: 0	
Дополнительная информация о версии прошивки: номер ревизии
Значащее поле: 1	
Дополнительная информация о версии прошивки: номер сборки

Type: WORD 
Read:   26 FE F9 FF
Answer: 66 FE F9 FF XX YY WW ZZ

XXYY – минорная;
WWZZ – мажорная часть.

Например, версия Firmware 2.15: XXYY = 0x000F, WWZZ = 0x0002. */

#define AD_EXTENDED_FIRMWARE                                              0xFFF9
/******************************************************************************/
/* Детальная информация о версии Firmware

0xFE 0xFFFA. UINT16_UINT16   R 
Значащее поле: 0	
Детальная информация о версии прошивки: младшая часть
Значащее поле: 1	
Детальная информация о версии прошивки: старшая часть

Type: WORD 
Read:   26 FE FA FF
Answer: 66 FE FA FF XX YY WW ZZ

XXYY – минорная;
WWZZ – мажорная часть.

Например, версия CanInterface 2.15: XXYY = 0x000F, WWZZ = 0x0002. */

#define AD_DETAILED_FIRMWARE                                              0xFFFA
/******************************************************************************/
/* "Контрольная сумма прошивки" адрес.

Read:    26 FF FB FF
Answer:  66 FF FB FF XX YY ZZ VV

VVZZYYXX - 32 битное значение контрольной суммы.
Параметр доступен для чтения, когда выполняется программа "загрузчик" в модуле.*/

#define AD_CRC32                                                          0xFFFB
/******************************************************************************/
/* Идентификатор микроконтроллера

Формат запроса чтения: 26 FF FC FF
Ответ: 66 FF FC FF KK NN MM XX

KK - код производителя (MANUF_ID); Для Атмела принимаем значение 1, для
STMicroelectronics – 2.

NN - код микроконтроллера(MCU_ID); MCU_ID – это сквозная нумерация в пределах
производителя. Для MCU Atmel предлагается использовать значение регистра
Signature Byte с адресом 0x0002 (см. раздел «Memory Programming» в datasheet на
конкретный тип микроконтроллера). Если значение уже присутствует в таблице, то
вводить новое.

MM – размер flash памяти микроконтроллера(FLASH_SIZE) в формате степени двойки;

XX – размер программируемой страницы(FLASH_PAGE_SIZE) в формате степени двойки,
т.е. размер страницы(байт)=2 в степени XX. 
----------------|----------|--------|------------------|-----------------|
Тип контроллера | MANUF_ID | MCU_ID | FLASH_SIZE       | FLASH_PAGE_SIZE |
                |          |        |------------------|-----------------|
                |          |        | байты  Степень 2 | байты Степень 2 |
----------------|----------|--------|------------------|-----------------|
ATMega8         | 1        | 7      | 8192   13        | 64    6         |
----------------|----------|--------|------------------|-----------------|
STM32F103RBT6   | 2        | 1      | 131072 17        | 1024  10        |
----------------|----------|--------|------------------|-----------------|
STM32F103RCT6   | 2        | 2      | 262144 18        | 2048 11         |
----------------|----------|--------|------------------|-----------------|
STM32F205RBT6   | 2        | 3      | 131072 17        | 16384 14        |
----------------|----------|--------|------------------|-----------------|
*/

#define AD_CPU_ID                                                         0xFFFC
/******************************************************************************/
/* Серийный номер изделия.

Type: LONG 
Read:   26 FE FD FF
Answer: 66 FE FD FF XX YY WW ZZ

ZZWWYYXX: серийный номер. */ 

#define AD_SERIALNUM                                                      0xFFFD
/******************************************************************************/
/* Идентификация модуля.

Read:   26 KK 0xFE 0xFF
Answer: 66 KK FE FF 52 XX YY ZZ

KK: FE,FF
XX - аппаратная версия модуля;
YY - программная версия модуля, если KK = FE;
программная версия загрузчика, если KK = FF:
ZZ - признак посылки события (см. EC_INFO). */

#define AD_INFO                                                           0xFFFE
/******************************************************************************/
/* Информация о модуле.

 Если модуль успешно стартует, то выдается сообщение о его появление на шине CAN.

 Format: 78 FE FE FF MM XX YY ZZ

 MM - CAN-ID модуля
 XX - аппаратная версия модуля;
 YY - программная версия модуля;
 ZZ - признак посылки события:
    01: ответ на общую команду "идентификация";
    02: ответ на адресную команду "идентификация";
    03: сброс по питанию;
    04: нажата клавиша "Reset";
    05: brown-out;
    06: сработал watchdog;
    07: восстановление связи после сбоя.


 Если во время исполнения загрузчика CRC32 не совпадает, то выдается сообщение
 о появление модуля на шине CAN от имени загрузчика.

 Format: 78 FF FE FF MM XX YY ZZ

 MM - CAN-ID модуля
 XX - аппаратная версия модуля
 YY - программная версия загрузчика
 ZZ - признак посылки события */

#define EC_INFO                                                           0xFFFE
/******************************************************************************/


/******************************************************************************/
#define CMD_CHECKCRC                                                      0xFFF9
#define CMD_PROGEEPROM                                                    0xFFFA
#define CMD_BOOTERASE                                                     0xFFFB
#define CMD_BOOTPROG                                                      0xFFFC
#define CMD_BOOTEXIT                                                      0xFFFD
#define CMD_BOOTRUN                                                       0xFFFE
/******************************************************************************/

/******************************************************************************/
#define CH_COMMON_00                                                        0x00
#define CH_COMMON_FE                                                        0xFE
#define CH_BOOTLOADER                                                       0xFF
/******************************************************************************/

//---
#endif